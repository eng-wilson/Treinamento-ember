{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","ember-project/tests/lint/app.lint-test.js","ember-project/tests/lint/templates.template.lint-test.js","ember-project/tests/lint/tests.lint-test.js","ember-project/tests/test-helper.js","ember-project/tests/unit/controllers/tasks-test.js","ember-project/tests/unit/routes/tasks-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"ember-project/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/tasks.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/tasks.js should pass ESLint\\n\\n4:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)');\n  });\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/tasks.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/tasks.js should pass ESLint\\n\\n');\n  });\n});","define(\"ember-project/tests/lint/templates.template.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('TemplateLint');\n  QUnit.test('ember-project/templates/application.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'ember-project/templates/application.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('ember-project/templates/tasks.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'ember-project/templates/tasks.hbs should pass TemplateLint.\\n\\nember-project/templates/tasks.hbs\\n  32:10  error  Incorrect indentation for `<div>` beginning at L32:C10. Expected `<div>` to be at an indentation of 12 but was found at 10.  block-indentation\\n');\n  });\n});","define(\"ember-project/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/controllers/tasks-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/tasks-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/tasks-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/tasks-test.js should pass ESLint\\n\\n');\n  });\n});","define(\"ember-project/tests/test-helper\", [\"ember-project/app\", \"ember-project/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"ember-project/tests/unit/controllers/tasks-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | tasks', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:tasks');\n      assert.ok(controller);\n    });\n  });\n});","define(\"ember-project/tests/unit/routes/tasks-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | tasks', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:tasks');\n      assert.ok(route);\n    });\n  });\n});","define('ember-project/config/environment', [], function() {\n  var prefix = 'ember-project';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('ember-project/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}